#!/usr/bin/env ampl
model DualSVM.mod;
printf "Enter number of features n: ";
read n <-;
printf "Enter number of data points m: ";
read m <-;

for {i in 1..m} {
	for {j in 1..n} {
		read A[i, j] < train.dat;
	}
	read y[i] < train.dat;
}

option solver cplex;
# show;

printf "Enter the parameter nu: ";
read nu <-;

solve;

# Retrieve primal solution from the dual
param w {1..n};
let {j in {1..n}} w[j] := sum{i in 1..m} lambda[i] * y[i] * A[i, j];

param gamma default 0;
param idx; # Auxiliary variable
param found_nbsv default 0;

param EPS := 0.0001; # Numerical errors, so equality and inequality are defined with some slack

# Loop over the lambda vector and find a non-bound SV
for {i in {1..m}} {
  printf "lambda_%d = %lf\n", i, lambda[i];
	if lambda[i] > EPS and lambda[i] < (nu - EPS) then {
	  let idx := i;
		let found_nbsv := 1;
	  break;
	}
}

if found_nbsv > 0 then {
	let gamma := 1 / y[idx] - sum{j in 1..n} w[j] * A[idx, j];
}
printf "gamma = %lf\n", gamma;

for {j in 1..n} {
	printf "w_%d = %lf\n", j, w[j]
}
