#!/usr/bin/env ampl
model GaussianSVM.mod;
printf "Enter number of features n: ";
read n <-;
printf "Enter number of data points m: ";
read m <-;

for {i in 1..m} {
	for {j in 1..n} {
		read A[i, j] < train.dat;
	}
	read y[i] < train.dat;
}

param tmp;
for {i in 1..m} {
	for {j in i..m} {
		let tmp := exp(-sum{k in 1..n} ((A[i, k] - A[j, k]) ^ 2));
		let K[i, j] := tmp;
		let K[j, i] := tmp;
	}
}

option solver cplex;
# show;

printf "Enter the parameter nu: ";
read nu <-;

solve;

# Get gamma using the kernel trick to avoid computing the feature map
param gamma default 0;
param idx; # Auxiliary variable
param found_nbsv default 0;

param EPS := 0.000001; # Numerical errors, so equality and inequality are defined with some slack

# Loop over the lambda vector and find a non-bound SV
for {i in {1..m}} {
	if lambda[i] > EPS and lambda[i] < (nu - EPS) then {
	  let idx := i;
		let found_nbsv := 1;
	  break;
	}
}

if found_nbsv > 0 then {
	let gamma := 1 / y[idx] - sum{j in 1..m} lambda[j] * exp(-sum{k in 1..n} ((A[idx, k] - A[j, k]) ^ 2));
}

printf "gamma = %lf\n", gamma;

for {j in 1..m} {
	printf "lambda_%d = %lf\n", j, lambda[j]
}
